<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<!-- API Documentation URL - http://developers.livechatinc.com/rest-api/#get-chats -->
<template name="listChats" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="dateFrom"
               description="Returns chats with any of its activities matching the date. Defaults to the beginning of time."/>
    <parameter name="dateTo"
               description="Returns chats with any of its activities matching the date. Defaults to today."/>
    <parameter name="timezone" description="Timezone in the TZ format (e.g. America/Phoenix)"/>
    <parameter name="page" description="Page number, defaults to 1."/>
    <parameter name="visitorId" description="Return chats with specified visitor id."/>
    <parameter name="query" description="Return chats containing the query."/>
    <parameter name="agent" description="Return chats for given agent login."/>
    <parameter name="group" description="Return chats for given group id."/>
    <parameter name="goal" description="Return chats for given goal id."/>
    <parameter name="hasGoal" description="1 or 0. If 1 is passed, returns chats having any goal."/>
    <parameter name="queued" description="1 or 0. If 1 is passed, returns chats started from queue."/>
    <parameter name="rate"
               description="Filter chats considering its rating status. Available values: rated, not_rated, rated_good, rated_bad."/>
    <parameter name="includePending" description="1 or 0. Whether to include chats that haven't yet ended."/>
    <parameter name="tag" description="Filter chats by a specified tag."/>
    <parameter name="tagged"
               description="1 or 0. If 1 is passed, returns chats having any tag. If 0 passed, returns chats without any tag."/>
    <sequence>
        <property name="uri.var.dateFrom" expression="$func:dateFrom"/>
        <property name="uri.var.dateTo" expression="$func:dateTo"/>
        <property name="uri.var.timezone" expression="$func:timezone"/>
        <property name="uri.var.page" expression="$func:page"/>
        <property name="uri.var.visitorId" expression="$func:visitorId"/>
        <property name="uri.var.query" expression="$func:query"/>
        <property name="uri.var.agent" expression="$func:agent"/>
        <property name="uri.var.group" expression="$func:group"/>
        <property name="uri.var.goal" expression="$func:goal"/>
        <property name="uri.var.hasGoal" expression="$func:hasGoal"/>
        <property name="uri.var.queued" expression="$func:queued"/>
        <property name="uri.var.rate" expression="$func:rate"/>
        <property name="uri.var.includePending" expression="$func:includePending"/>
        <property name="uri.var.tag" expression="$func:tag"/>
        <property name="uri.var.tagged" expression="$func:tagged"/>
        <script language="js">
            <![CDATA[
            var dateFrom = mc.getProperty('uri.var.dateFrom');
            var dateTo = mc.getProperty('uri.var.dateTo');
            var timezone = mc.getProperty('uri.var.timezone');
            var page = mc.getProperty('uri.var.page');
            var visitorId = mc.getProperty('uri.var.visitorId');
            var query = mc.getProperty('uri.var.query');
            var agent = mc.getProperty('uri.var.agent');
            var group = mc.getProperty('uri.var.group');
            var goal = mc.getProperty('uri.var.goal');
            var hasGoal = mc.getProperty('uri.var.hasGoal');
            var queued = mc.getProperty('uri.var.queued');
            var rate = mc.getProperty('uri.var.rate');
            var includePending = mc.getProperty('uri.var.includePending');
            var tag = mc.getProperty('uri.var.tag');
            var tagged = mc.getProperty('uri.var.tagged');
            var urlQuery = '';
            if (dateFrom != null && dateFrom != ""){
               urlQuery += 'date_from=' + encodeURIComponent(dateFrom) + '&';
            }
            if (dateTo != null && dateTo != ""){
               urlQuery += 'date_to=' + encodeURIComponent(dateTo) + '&';
            }
            if (timezone != null && timezone != ""){
               urlQuery += 'timezone=' + encodeURIComponent(timezone) + '&';
            }
            if (page != null && page != ""){
               urlQuery += 'page=' + encodeURIComponent(page) + '&';
            }
            if (visitorId != null && visitorId != ""){
               urlQuery += 'visitor_id=' + encodeURIComponent(visitorId)  + '&';
            }
            if (query != null && query != ""){
               urlQuery += 'query=' + encodeURIComponent(query) + '&';
            }
            if (agent != null && agent != ""){
               urlQuery += 'agent=' + encodeURIComponent(agent) + '&';
            }
            if (group != null && group != ""){
               urlQuery += 'group=' + encodeURIComponent(group) + '&';
            }
            if (goal != null && goal != ""){
               urlQuery += 'goal=' +  encodeURIComponent(goal) + '&';
            }
            if (hasGoal != null && hasGoal != ""){
               urlQuery += 'has_goal=' + encodeURIComponent(hasGoal) + '&';
            }
            if (queued != null && queued != ""){
               urlQuery += 'queued=' + encodeURIComponent(queued) + '&';
            }
            if (rate != null && rate != ""){
               urlQuery += 'rate=' + encodeURIComponent(rate) + '&';
            }
            if (includePending != null && includePending != ""){
               urlQuery += 'include_pending=' + encodeURIComponent(includePending) + '&';
            }
            if (tag != null && tag != ""){
               urlQuery += 'tag=' + encodeURIComponent(tag) + '&';
            }
            if (tagged != null && tagged != ""){
               urlQuery += 'tagged=' + encodeURIComponent(tagged) + '&';
            }
            // Prefix the urlQuery with '?' and remove the trailing '&'
            if (urlQuery != "") {
              urlQuery = '?' + urlQuery.toString().substring(0, urlQuery.toString().lastIndexOf("&"));
              mc.setProperty('uri.var.urlQuery', urlQuery);    
            } 
            mc.setProperty('uri.var.urlQuery', urlQuery);   
         ]]>
        </script>
        <call>
            <endpoint>
                <http method="get" uri-template="legacy-encoding:{uri.var.apiUrl}/chats{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="ETag" action="remove" scope="transport"/>
        <header name="X-Powered-By" action="remove" scope="transport"/>
        <header name="X-Content-Type-Options" action="remove" scope="transport"/>
    </sequence>
</template>