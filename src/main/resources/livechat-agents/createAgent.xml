<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<!-- API Documentation URL - http://developers.livechatinc.com/rest-api/#create-agent -->
<template name="createAgent" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="agentLogin" description="Email address for the login agent."/>
    <parameter name="name" description="Neme of the agent."/>
    <parameter name="jobTitle" description="Job title of the agent."/>
    <parameter name="loginStatus"
               description="Status of the login. possible values are 'accepting' 'chats' (default), 'not accepting chats'."/>
    <parameter name="password" description="Password for the agent account."/>
    <parameter name="permission" description="Permission level for the agent account."/>
    <parameter name="groups" description="An array which contain  list of group IDs."/>
    <parameter name="notificationNewVisitor" description="Enable new visitor notification. Allowed values: 0 or 1."/>
    <parameter name="notificationReturningVisitor"
               description="Enable returning visitor notification. Allowed values: 0 or 1."/>
    <parameter name="notificationQueuedVisitor"
               description="Enable queued visitor notification. Allowed values: 0 or 1."/>
    <parameter name="notificationVisitorIsTyping"
               description="Enable visitor typing notification. Allowed values: 0 or 1."/>
    <parameter name="notificationVisitorNewGoal"
               description="Enable visitor new goal notification. Allowed values: 0 or 1."/>
    <parameter name="notificationIncomingChat"
               description="Enable incoming chat notification. Allowed values: 0 or 1."/>
    <parameter name="dailySummary" description="Boolean value to create daily summery (0 or 1 (default))."/>
    <parameter name="maxChatsCount" description="The maximum count of the chat(s)."/>
    <sequence>
        <property name="uri.var.agentLogin" expression="$func:agentLogin"/>
        <property name="uri.var.name" expression="$func:name"/>
        <property name="uri.var.jobTitle" expression="$func:jobTitle"/>
        <property name="uri.var.loginStatus" expression="$func:loginStatus"/>
        <property name="uri.var.password" expression="$func:password"/>
        <property name="uri.var.permission" expression="$func:permission"/>
        <property name="uri.var.groups" expression="$func:groups"/>
        <property name="uri.var.notificationNewVisitor" expression="$func:notificationNewVisitor"/>
        <property name="uri.var.notificationReturningVisitor" expression="$func:notificationReturningVisitor"/>
        <property name="uri.var.notificationQueuedVisitor" expression="$func:notificationQueuedVisitor"/>
        <property name="uri.var.notificationVisitorIsTyping" expression="$func:notificationVisitorIsTyping"/>
        <property name="uri.var.notificationVisitorNewGoal" expression="$func:notificationVisitorNewGoal"/>
        <property name="uri.var.notificationIncomingChat" expression="$func:notificationIncomingChat"/>
        <property name="uri.var.dailySummary" expression="$func:dailySummary"/>
        <property name="uri.var.maxChatsCount" expression="$func:maxChatsCount"/>
        <payloadFactory media-type="json">
            <format>
                {
                "login":"$1",
                "name":"$2"
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.agentLogin')"/>
                <arg expression="get-property('uri.var.name')"/>
            </args>
        </payloadFactory>
        <script language="js">
            <![CDATA[
            var jobTitle = mc.getProperty("uri.var.jobTitle");
            var loginStatus = mc.getProperty("uri.var.loginStatus");
            var password = mc.getProperty("uri.var.password");
            var permission = mc.getProperty("uri.var.permission");
            var groups = mc.getProperty("uri.var.groups");
            var notificationNewVisitor = mc.getProperty("uri.var.notificationNewVisitor");
            var notificationReturningVisitor = mc.getProperty("uri.var.notificationReturningVisitor");
            var notificationQueuedVisitor = mc.getProperty("uri.var.notificationQueuedVisitor");
            var notificationVisitorIsTyping = mc.getProperty("uri.var.notificationVisitorIsTyping");
            var notificationVisitorNewGoal = mc.getProperty("uri.var.notificationVisitorNewGoal");
            var notificationIncomingChat = mc.getProperty("uri.var.notificationIncomingChat");
            var dailySummary = mc.getProperty("uri.var.dailySummary");
            var maxChatsCount = mc.getProperty("uri.var.maxChatsCount");
            var payload = mc.getPayloadJSON();
            payload.notifications = {};
            if (jobTitle != null && jobTitle != ""){
               payload.job_title  = jobTitle;
            }
            if (loginStatus != null && loginStatus != ""){
               payload.login_status  = loginStatus;
            }
            if (password != null && password != ""){
               payload.password  = password;
            }
            if (permission != null && permission != ""){
               payload.permission  = permission;
            }
            if (groups != null && groups != ""){
               payload.groups = eval('(' + groups + ')');
            }
            if (notificationNewVisitor != null && notificationNewVisitor != ""){
               payload.notifications.new_visitor = notificationNewVisitor;
            }
            if (notificationReturningVisitor != null && notificationReturningVisitor != ""){
               payload.notifications.returning_visitor = notificationReturningVisitor;
            }
            if (notificationQueuedVisitor != null && notificationQueuedVisitor != ""){
               payload.notifications.queued_visitor = notificationQueuedVisitor;
            }
            if (notificationVisitorIsTyping != null && notificationVisitorIsTyping != ""){
               payload.notifications.visitor_is_typing = notificationVisitorIsTyping;
            }
            if (notificationVisitorNewGoal != null && notificationVisitorNewGoal != ""){
               payload.notifications.new_goal = notificationVisitorNewGoal;
            }
            if (notificationIncomingChat != null && notificationIncomingChat != ""){
               payload.notifications.incoming_chat = notificationIncomingChat;
            }
            if (dailySummary != null && dailySummary != ""){
               payload.daily_summary = dailySummary;
            }
            if (maxChatsCount != null && maxChatsCount != ""){
               payload.max_chats_count = maxChatsCount;
            }
            mc.setPayloadJSON(payload);
         ]]>
        </script>
        <property name="DISABLE_CHUNKING" scope="axis2" value="true"/>
        <call>
            <endpoint>
                <http method="post" uri-template="{uri.var.apiUrl}/agents"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="ETag" action="remove" scope="transport"/>
        <header name="X-Powered-By" action="remove" scope="transport"/>
        <header name="X-Content-Type-Options" action="remove" scope="transport"/>
    </sequence>
</template>