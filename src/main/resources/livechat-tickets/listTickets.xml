<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<!-- API Documentation URL - http://developers.livechatinc.com/rest-api/#get-tickets -->
<template name="listTickets" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="dateFrom"
               description="Returns tickets with any of its activities matching the date. Defaults to the beginning of time."/>
    <parameter name="dateTo"
               description="Returns tickets with any of its activities matching the date. Defaults to today."/>
    <parameter name="page" description="Page number, defaults to 1."/>
    <parameter name="assigned"
               description="If 0, returns only unassigned tickets. If 1, returns only tickets assigned to any agent."/>
    <parameter name="order"
               description="Orders tickets by date of last ticket modification. Possible values: desc, asc. Defaults to desc."/>
    <parameter name="status" description="Not set by default. Possible values: open, pending, solved or spam."/>
    <parameter name="assignee" description="Return tickets assigned to given agent's login."/>
    <parameter name="query" description="Return tickets containing the query."/>
    <parameter name="requesterMail" description="Return tickets assigned to given requester."/>
    <parameter name="group" description="Return tickets for given group."/>
    <parameter name="source"
               description="Return tickets for given source. Possible values: lc2 (created from archives), mail, facebook, agent-app-manual (created manually), chat-window (created from ticket form)."/>
    <parameter name="tag" description="Return tickets for the specified tag."/>
    <parameter name="tagged"
               description="If 1 is passed, returns tickets having any tag. If 0 passed, returns tickets without any tag."/>
    <sequence>
        <property name="uri.var.dateFrom" expression="$func:dateFrom"/>
        <property name="uri.var.dateTo" expression="$func:dateTo"/>
        <property name="uri.var.page" expression="$func:page"/>
        <property name="uri.var.assigned" expression="$func:assigned"/>
        <property name="uri.var.order" expression="$func:order"/>
        <property name="uri.var.status" expression="$func:status"/>
        <property name="uri.var.assignee" expression="$func:assignee"/>
        <property name="uri.var.query" expression="$func:query"/>
        <property name="uri.var.requesterMail" expression="$func:requesterMail"/>
        <property name="uri.var.group" expression="$func:group"/>
        <property name="uri.var.source" expression="$func:source"/>
        <property name="uri.var.tag" expression="$func:tag"/>
        <property name="uri.var.tagged" expression="$func:tagged"/>
        <script language="js">
            <![CDATA[
            var dateFrom = mc.getProperty('uri.var.dateFrom');
            var dateTo = mc.getProperty('uri.var.dateTo');
            var page = mc.getProperty('uri.var.page');
            var assigned = mc.getProperty('uri.var.assigned');
            var order = mc.getProperty('uri.var.order');
            var status = mc.getProperty('uri.var.status');
            var assignee = mc.getProperty('uri.var.assignee');
            var query = mc.getProperty('uri.var.query');
            var requesterMail = mc.getProperty('uri.var.requesterMail');
            var group = mc.getProperty('uri.var.group');
            var source = mc.getProperty('uri.var.source');
            var tag = mc.getProperty('uri.var.tag');
            var tagged = mc.getProperty('uri.var.tagged');
            var urlQuery = '';
            if (dateFrom != null && dateFrom != ""){
               urlQuery += 'date_from=' + encodeURIComponent(dateFrom) + '&';
            }
            if (dateTo != null && dateTo != ""){
               urlQuery += 'date_to=' +  encodeURIComponent(dateTo) + '&';
            }
            if (page != null && page != ""){
               urlQuery += 'page=' +  encodeURIComponent(page) + '&';
            }
            if (assigned != null && assigned != ""){
               urlQuery += 'assigned=' +  encodeURIComponent(assigned) + '&';
            }
            if (order != null && order != ""){
               urlQuery += 'order=' +  encodeURIComponent(order) + '&';
            }
            if (status != null && status != ""){
               urlQuery += 'status=' +  encodeURIComponent(status) + '&';
            }
            if (assignee != null && assignee != ""){
               urlQuery += 'assignee=' +  encodeURIComponent(assignee) + '&';
            }
            if (query != null && query != ""){
               urlQuery += 'query=' +  encodeURIComponent(query) + '&';
            }
            if (requesterMail != null && requesterMail != ""){
               urlQuery += 'requester[mail]=' +  encodeURIComponent(requesterMail) + '&';
            }
            if (group != null && group != ""){
               urlQuery += 'group=' +  encodeURIComponent(group) + '&';
            }
            if (source != null && source != ""){
               urlQuery += 'source=' +  encodeURIComponent(source) + '&';
            }
            if (tag != null && tag != ""){
               urlQuery += 'tag=' +  encodeURIComponent(tag) + '&';
            }
            if (tagged != null && tagged != ""){
               urlQuery += 'tagged=' +  encodeURIComponent(tagged) + '&';
            }
            // Prefix the urlQuery with '?' and remove the trailing '&'
            if (urlQuery != "") {
              urlQuery = '?' + urlQuery.toString().substring(0, urlQuery.toString().lastIndexOf("&"));
              mc.setProperty('uri.var.urlQuery', urlQuery);    
            }
            mc.setProperty('uri.var.urlQuery', urlQuery);   
         ]]>
        </script>
        <call>
            <endpoint>
                <http method="get" uri-template="legacy-encoding:{uri.var.apiUrl}/tickets{uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="ETag" action="remove" scope="transport"/>
        <header name="X-Powered-By" action="remove" scope="transport"/>
        <header name="X-Content-Type-Options" action="remove" scope="transport"/>
    </sequence>
</template>